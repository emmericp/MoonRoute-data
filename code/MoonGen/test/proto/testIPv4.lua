describe("IPv4 class", function()
	local ffi = require "ffi"
	local pkt = require "packet"
	it("should parse", function()
		local ip = parseIP4Address("1.2.3.4")
		assert.are.same(ip, 0x01020304)
	end)
	it("should return in correct byteorder", function()
		local ipString = "123.56.200.42"
		local ip = ffi.new("union ip4_address")
		ip:setString(ipString)
	
		assert.are.same(ipString, ip:getString())
	end)
	it("should support ==", function()
		-- in uint32 format
		local ip = parseIP4Address("123.56.200.42")
		local ip2 = parseIP4Address("123.56.200.42")
		local ip3 = parseIP4Address("123.56.200.43")

		assert.are.same(ip, ip2)
		assert.are.not_same(ip, ip3)
		assert.are.not_same(ip, 0)

		-- in ipv4_address format
		local ipAddress = ffi.new("union ip4_address")
		local ipAddress2 = ffi.new("union ip4_address")
		local ipAddress3 = ffi.new("union ip4_address")
		ipAddress:set(ip)
		ipAddress2:set(ip2)
		ipAddress3:set(ip3)

		assert.are.same(ip, ip2)
		assert.are.not_same(ip, ip3)
		assert.are.not_same(ip, 0)
	end)
	it("should do arithmetic", function()
		local ip1 = ffi.new("union ip4_address")
		local ip2 = ffi.new("union ip4_address")
		local ip3 = ffi.new("union ip4_address")
		local ip4 = ffi.new("union ip4_address")
		local res1 = ffi.new("union ip4_address")
		local res2 = ffi.new("union ip4_address")
		ip1:set(parseIP4Address("1.2.3.4"))
		ip2:set(parseIP4Address("1.2.3.5"))
		ip3:set(parseIP4Address("255.255.255.254"))
		ip4:set(parseIP4Address("0.0.0.0"))

		res1:set(ip1 + 1)
		res2:set(ip4 - 2)
		assert.are.same(res1:getString(), ip2:getString())
		assert.are.same(res2:getString(), ip3:getString())
	end)
	it("should support in-place arithmetic", function()
		local ip1 = ffi.new("union ip4_address")
		local ip2 = ffi.new("union ip4_address")
		local ip3 = ffi.new("union ip4_address")
		local ip4 = ffi.new("union ip4_address")
		ip1:set(parseIP4Address("1.2.3.4"))
		ip2:set(parseIP4Address("255.255.255.254"))
		ip3:set(parseIP4Address("1.2.3.5"))
		ip4:set(parseIP4Address("0.0.0.0"))
		ip1:add(1)
		ip2:add(2)
		assert.are.same(ip1, ip3)
		assert.are.same(ip2, ip4)
	end)

end)

